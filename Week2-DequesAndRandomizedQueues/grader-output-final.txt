See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  36/37 tests passed
Memory:       53/53 tests passed
Timing:       62/62 tests passed

Aggregate score: 98.24% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 7.0K Oct 17 04:40 Deque.java
-rw-r--r-- 1 3.3K Oct 17 04:40 RandomizedQueue.java
-rw-r--r-- 1  746 Oct 17 04:40 Subset.java
-rw-r--r-- 1 3.0K Oct 17 04:40 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:12: warning: [unchecked] unchecked cast
        backingArray = (Item[]) new Object[10];
                                ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:41: warning: [unchecked] unchecked cast
            backingArray = (Item[]) resizedArray;
                                    ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:72: warning: [unchecked] unchecked cast
        return (Item[]) resizedArray;
                        ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

================================================================

% javac Subset.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
[ERROR] Deque.java:92:10: 'else' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Deque.java:92:10: '}' is not followed by whitespace. [WhitespaceAround]
[ERROR] Deque.java:92:14: 'else' is not followed by whitespace. [WhitespaceAround]
[ERROR] Deque.java:92:14: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Deque.java:109:16: Anonymous inner class length is 25 lines (max allowed is 20). [AnonInnerLength]
[ERROR] Deque.java:158:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:165:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:172:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:179:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:188:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:192:3: The comment is empty. [IllegalTokenText]
[ERROR] Deque.java:200:3: The comment is empty. [IllegalTokenText]
[ERROR] RandomizedQueue.java:42:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] RandomizedQueue.java:92:16: Anonymous inner class length is 29 lines (max allowed is 20). [AnonInnerLength]
[ERROR] RandomizedQueue.java:93:20: The instance (or static) variable 'itrArray' must be private. [VisibilityModifier]
[ERROR] RandomizedQueue.java:94:17: The instance (or static) variable 'itrEnd' must be private. [VisibilityModifier]
[ERROR] Subset.java:20:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Checkstyle ends with 17 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==> passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==> passed

Test 11: Create two nested iterators to same deque
  *  N = 10
  *  N = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  *  N = 10
  *  N = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 16/16 tests passed!


================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: Calls to enqueue() and size().
  *     5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *    50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to enqueue() and dequeue().
  *     5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *     5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *    50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: Calls to enqueue(), sample(), and size().
  *     5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *     5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *    50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: Calls to enqueue(), dequeue(), sample(), isEmpty(), and size().
  *     5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *     5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *    50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *  1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
==> passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==> passed

Test 6: Create multiple randomized queue objects at the same time
==> passed

Test 7: Check that iterator() returns correct items after a sequence of
        enqueue() operations
==> passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==> passed

Test 9: Create two nested iterators over same randomized queue
  *  N = 10
  *  N = 1000
==> passed

Test 10: Create two parallel iterators over same randomized queue
  *  N = 10
  *  N = 1000
==> passed

Test 11: Create two iterators over different randomized queues
==> passed

Test 12: Create RandomizedQueue objects of different parameterized types
==> passed

Test 13: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times
  *  Enqueue strings A to E and sampling 5000 times
  *  Enqueue strings A to H and sampling 8000 times
  *  Enqueue strings A to J and sampling 10000 times
==> passed

Test 14: Check randomness of dequeue() by enqueueing items, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until C is dequeued; repeat 3000 times
  *  Enqueue strings A to E and call dequeue() until B is dequeued; repeat 5000 times
  *  Enqueue strings A to H and call dequeue() until A is dequeued; repeat 8000 times
  *  Enqueue strings A to J and call dequeue() until D is dequeued; repeat 10000 times
==> passed

Test 15: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until C is returned;
     Repeat 3000 times
  *  Enqueue strings A to E, create iterator(), and call next() until B is returned;
     Repeat 5000 times
  *  Enqueue strings A to H, create iterator(), and call next() until B is returned;
     Repeat 8000 times
  *  Enqueue strings A to J, create iterator(), and call next() until J is returned;
     Repeat 10000 times
==> passed

Test 16: Check that NullPointerException is thrown when inserting null items
==> passed

Test 17: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: Check iterator() when RandomizedQueue is empty
==> passed


Total: 18/18 tests passed!


================================================================

******************************************************************************
*          correctness (substituting reference RandomizedQueue.java and Deque.java)
******************************************************************************

Testing methods in Subset
*-----------------------------------------------------------
Tests 1-3 call the main() function directly, resetting standard input
before each call.

Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
C
B
A

% echo "A B C D E F G H I" | java Subset 3
[student solution]
B
A
C

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
AA
BB
BB
CC
CC
BB
BB
BB

==> passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
A

% echo "A B C D E F G H I" | java Subset 5
[student solution]
B
E
D
C
A

% echo "A B C D E F G H I" | java Subset 5
[student solution]
A
B
E
D
C

% echo "A B C D E F G H I" | java Subset 9
[student solution]
F
A
G
I
H
D
C
B
E

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
was
times
it
worst
it
the
of
best
was
the

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
it
best
was
times,
of
was
worst
It
the
the

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 20
[student solution]
it
was
was
times,
the
it
times,
of
It
of
age
of
wisdom,
the
was
was
the
worst
best
it

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
BB
CC
BB
AA
BB
BB

==> passed

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt
        value  observed  expected
        -------------------------
            A      1000       100
            B         0       100
            C         0       100
            D         0       100
            E         0       100
            F         0       100
            G         0       100
            H         0       100
            I         0       100
            J         0       100
        -------------------------
                   1000      1000
    
    chi-square = 9000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 250 subsets of size 4 from subset10.txt
        value  observed  expected
        -------------------------
            A       250       100
            B       250       100
            C       250       100
            D       250       100
            E         0       100
            F         0       100
            G         0       100
            H         0       100
            I         0       100
            J         0       100
        -------------------------
                   1000      1000
    
    chi-square = 1500.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 600 subsets of size 1 from subset6.txt
        value  observed  expected
        -------------------------
            A       600       100
            B         0       100
            C         0       100
            D         0       100
            E         0       100
            F         0       100
        -------------------------
                    600       600
    
    chi-square = 3000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 300 subsets of size 2 from subset6.txt
        value  observed  expected
        -------------------------
            A       300       100
            B       300       100
            C         0       100
            D         0       100
            E         0       100
            F         0       100
        -------------------------
                    600       600
    
    chi-square = 1200.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 800 subsets of size 1 from subset8.txt
        value  observed  expected
        -------------------------
            A       800       200
            B         0       100
            C         0       400
            D         0       100
        -------------------------
                    800       800
    
    chi-square = 2400.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 160 subsets of size 5 from subset8.txt
        value  observed  expected
        -------------------------
            A       320       200
            B       160       100
            C       320       400
            D         0       100
        -------------------------
                    800       800
    
    chi-square = 224.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  * 1000 subsets of size 1 from mediumTale.txt
        value  observed  expected
        -------------------------
          age      1000       167
         best         0       167
    foolishness         0       167
           it         0        42
           of         0       167
          the         0        83
        times         0        42
          was         0        83
       wisdom         0        42
        worst         0        42
        -------------------------
                   1000      1000
    
    chi-square = 5000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==> FAILED

Total: 2/3 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, n = 9, k = 1
  * filename = subset9.txt, n = 9, k = 2
  * filename = subset9.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is >=k and <= n
  * filename = subset9.txt, n = 9, k = 1
  * filename = subset9.txt, n = 9, k = 2
  * filename = subset9.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==> passed

Total: 3/2 tests passed!

================================================================



******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing N items is 48N + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting N items,
            where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          360         
=> passed       64         2600         
=> passed      256        10280         
=> passed     1024        41000         
=> passed     4096       163880         
==> 5/5 tests passed

Memory: 40.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items,
            where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          400         
=> passed       64         2640         
=> passed      256        10320         
=> passed     1024        41040         
=> passed     4096       163920         
==> 5/5 tests passed

Memory after adding N = 2^i + 1 items: 40.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items
            and deleting N items, where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          400         
=> passed       64         2640         
=> passed      256        10320         
=> passed     1024        41040         
=> passed     4096       163920         
==> 5/5 tests passed

Memory: 40.00 n + 40.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items and then
            deleting all but one item, where N is a power of 2.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=> passed        8           80         
=> passed       64           80         
=> passed      256           80         
=> passed     1024           80         
=> passed     4096           80         
==> 5/5 tests passed

Memory after adding N = 2^i items: 80.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of iterator after adding N = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert N strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
==> passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
==> passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed

Total: 28/28 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a
randomized queue containing N items is 48N + 192.

Running 23 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=> passed       64          696         
=> passed      256         2616         
=> passed     1024        10296         
=> passed     4096        41016         
==> 4/4 tests passed


Memory: 10.00 n + 56.00   (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed       64          696         
=> passed      256         2616         
=> passed     1024        10296         
=> passed     4096        41016         
==> 4/4 tests passed


Memory: 10.00 n + 46.00   (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64         1336         
=> passed      256         5176         
=> passed     1024        20536         
=> passed     4096        81976         
==> 4/4 tests passed


Memory: 20.00 n + 36.00   (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed       64          136         
=> passed      256          136         
=> passed     1024          136         
=> passed     4096          136         
==> 4/4 tests passed


Memory: 136.00   (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64          704         
=> passed      256         2624         
=> passed     1024        10304         
=> passed     4096        41024         
==> 4/4 tests passed


Memory: 10.00 n + 64.00   (R^2 = 1.000)



Test 6a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 7: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
      -  failed on trial 88 of 128
      -  when the randomized queue contains 128 objects,
      -  with 41 objects remaining to be iterated over;
      -  the call to next() caused a change in memory of -640 bytes
      -  any change of more than 480 bytes fails the test
  * T = 256
      -  failed on trial 176 of 256
      -  when the randomized queue contains 256 objects,
      -  with 81 objects remaining to be iterated over;
      -  the call to next() caused a change in memory of -1280 bytes
      -  any change of more than 480 bytes fails the test
==> FAILED

Total: 22/23 tests passed!

================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g:  N random calls to addFirst(), addLast(), removeFirst(),
             and removeLast().

                    N  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.03
=> passed      512000     0.05
=> passed     1024000     0.04
=> passed     2048000     0.19
==> 12/12 tests passed


Test 2a-2g:  Create deque of N objects, then iterate over the N objects
             by calling next() and hasNext().

                    N  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.00
=> passed     1024000     0.01
=> passed     2048000     0.02
==> 12/12 tests passed


Test 3a-3g:  Create deque of N objects, then interleave N calls each to
             removeFirst()/removeLast() and addFirst()/addLast().

                    N  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> pas

...

Warning: the grading output was truncated due to excessive length.
Typically, this is becasue you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception).